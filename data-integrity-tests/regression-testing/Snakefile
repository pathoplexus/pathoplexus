wildcard_constraints:
    organism=r"[^_.]+",
    segment=r"[^_.]+",
    instance=r"[^_.]+",
    extension=r"[^_.]+",
    difftype=r"seq|meta",


rule all:
    input:
        expand(
            "results/{organism}.{difftype}.prod.staging.diff",
            organism=["cchf", "west-nile", "ebola-zaire", "ebola-sudan"],
            difftype=["seq", "meta"],
        ),


def segments(w):
    return ["L", "M", "S"] if w.organism == "cchf" else ["main"]


def url(w):
    filetype = "sequence" if hasattr(w, "segment") else "metadata"
    if hasattr(w, "segment"):
        url_segment = "" if w.segment == "main" else f"/{w.segment}"
        length_query = "" if w.segment == "main" else f"&length_{w.segment}From=1"
        filetype = "sequence"
    else:
        url_segment = length_query = ""
        filetype = "metadata"
    match w.instance:
        case "prod":
            subdomain = ""
        case "staging":
            subdomain = "-demo"
        case _:
            subdomain = "-preview-" + w.instance
    base = f"https://lapis{subdomain}.pathoplexus.org/{w.organism}/sample/"
    rest = (
        url_segment
        + "?downloadAsFile=true&versionStatus=LATEST_VERSION&isRevocation=false&dataUseTerms=OPEN&compression=zstd"
        + length_query
    )
    match filetype:
        case "metadata":
            return base + "details" + rest + "&dataFormat=TSV"
        case "sequence":
            return base + "unalignedNucleotideSequences" + rest
        case _:
            raise RuntimeError(f"Unreachable code reached: {filetype=}")


rule sequence_download:
    output:
        "results/{organism}_{segment}_{instance}.fasta",
    params:
        url=url,
    shell:
        """
        curl "{params.url}" | zstdcat > {output}
        """


rule metadata_download:
    output:
        "results/{organism}_{instance}.tsv",
    params:
        url=url,
    shell:
        """
        curl "{params.url}" | zstdcat > {output}
        """


rule sequence_tsv:
    input:
        "results/{organism}_{segment}_{instance}.fasta",
    output:
        "results/{organism}_{segment}_{instance}.seq.tsv",
    shell:
        """
        echo "accessionVersion\tsequence" > {output}
        seqkit fx2tab {input} >> {output}
        """


rule join_tsv:
    input:
        seq=expand(
            "results/{{organism}}_{segment}_{{instance}}.seq.tsv", segment=segments
        ),
        details="results/{organism}_{instance}.tsv",
    output:
        "results/{organism}_{instance}.joined.tsv",
    shell:
        """
        cp {input.details} {output}
        for f in {input.seq}; do
            export segment=$(basename $f | cut -d_ -f2)
            tsv-join -H \
                --write-all "''" \
                --append-fields "sequence" \
                --filter-file $f \
                --key-fields accessionVersion \
                --prefix $(echo $segment)_ \
                {output} \
            | sponge {output}
        done
        """


rule invariant_subset:
    input:
        "results/{organism}_{instance}.joined.tsv",
    output:
        "results/{organism}_{instance}.invariant.tsv",
    params:
        exclude_fields=",".join(
            {
                "accession",
                "accessionVersion",
                "releasedDate",
                "submittedDate",
                "releasedAtTimestamp",
                "submittedAtTimestamp",
                "displayName",
                "versionStatus",
            }
        ),
    shell:
        """
        tsv-select -H \
            --exclude {params.exclude_fields} \
            -f "submissionId" \
            --rest last \
            {input} \
        | keep-header - -- ./bin/tsv-sort -k1,1 \
        > {output}
        """


rule invariant_subsets:
    input:
        "results/{organism}_{instance}.invariant.tsv",
    output:
        sequences="results/{organism}_{instance}.invariant.seq.tsv",
        metadata="results/{organism}_{instance}.invariant.meta.tsv",
    params:
        segment_names=lambda w: ",".join(map(lambda x: x + "_sequence", segments(w))),
    shell:
        """
        tsv-select -H \
            -f "submissionId,{params.segment_names}" \
            {input} \
        > {output.sequences}
        tsv-select -H \
            --exclude "{params.segment_names}" \
            {input} \
        > {output.metadata}
        """


rule diff:
    input:
        "results/{organism}_{a}.invariant.{difftype}.tsv",
        "results/{organism}_{b}.invariant.{difftype}.tsv",
    output:
        "results/{organism}.{difftype}.{a}.{b}.diff",
    shell:
        """
        csv-diff {input} --key=submissionId --format=tsv > {output} || echo "Differences found"
        """
