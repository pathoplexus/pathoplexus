import{G as s,n as a,d as r,w as d,z as y,Q as b,t as f,i as w}from"./createAuthorizationHeader.D0lXW5f5.js";import{p as n,z as e,e as j,f as E,u as M,h as V,i as H,j as k,k as C,l as A,q as P,t as Q,w as O,x as z,y as T,A as g,B as x,C as q,D as G,E as B,G as D,H as I,I as W}from"./lapis.BMBLPoxt.js";const L=s({method:"post",path:d("/submit"),alias:"submit",requestFormat:"form-data",parameters:[r,{name:"data",type:"Body",schema:j.transform(t=>{const{fileMapping:o,...i}=t;return o!==void 0?{...i,fileMapping:JSON.stringify(o)}:i})}],response:e.array(E),errors:[{status:"default",schema:n},{status:400,schema:n},{status:422,schema:n},a]}),$=s({method:"post",path:d("/revise"),alias:"revise",requestFormat:"form-data",parameters:[r,{name:"data",type:"Body",schema:M}],response:e.array(E),errors:[{status:"default",schema:n},{status:400,schema:n},{status:422,schema:n},a]}),J=s({method:"get",path:d("/get-data-to-edit/:accession/:version"),alias:"getDataToEdit",parameters:[r],response:T,errors:[a]}),K=s({method:"post",path:d("/revoke"),alias:"revokeSequences",parameters:[r,{name:"data",type:"Body",schema:V}],response:e.array(E),errors:[{status:"default",schema:n},{status:422,schema:n},a]}),X=s({method:"post",path:d("/submit-edited-data"),alias:"submitReviewedSequence",parameters:[r,{name:"data",type:"Body",schema:H}],response:e.never(),errors:[a]}),Y=s({method:"get",path:d("/get-sequences"),alias:"getSequences",parameters:[r,{name:"groupIdsFilter",type:"Query",schema:e.string().optional()},{name:"statusesFilter",type:"Query",schema:e.string().optional()},{name:"processingResultFilter",type:"Query",schema:e.string().optional()},{name:"page",type:"Query",schema:e.number().optional()},{name:"size",type:"Query",schema:e.number().optional()}],response:k,errors:[a,{status:404,schema:n}]}),Z=s({method:"post",path:d("/approve-processed-data"),alias:"approveProcessedData",parameters:[r,{name:"data",type:"Body",schema:C}],response:e.array(A),errors:[{status:"default",schema:n},a]}),_=s({method:"delete",path:d("/delete-sequence-entry-versions"),alias:"deleteSequences",parameters:[r,{name:"accessionVersions",type:"Body",schema:P}],response:e.array(A),errors:[{status:"default",schema:n},a]}),ee=s({method:"post",path:d("/extract-unprocessed-data"),alias:"extractUnprocessedData",parameters:[r,{name:"numberOfSequenceEntries",type:"Query",schema:e.number()},{name:"pipelineVersion",type:"Query",schema:e.number()}],response:e.union([e.string(),Q]),errors:[a]}),te=s({method:"post",path:d("/submit-processed-data"),alias:"submitProcessedData",parameters:[r,{name:"data",type:"Body",schema:e.string()},{name:"pipelineVersion",type:"Query",schema:e.number()}],response:e.never(),errors:[{status:"default",schema:n},{status:422,schema:n},a]}),se=s({method:"get",path:"/data-use-terms/:accession",alias:"getDataUseTermsHistory",response:e.array(O),errors:[{status:"default",schema:n},{status:404,schema:n}]}),ae=s({method:"put",path:"/data-use-terms",alias:"setDataUseTerms",parameters:[r,{name:"data",type:"Body",schema:e.object({accessions:e.array(e.string()),newDataUseTerms:z})}],response:e.never(),errors:[{status:"default",schema:n},{status:404,schema:n}]}),ne=y([L,$,J,K,X,Y,Z,_,ee,te,se,ae]);function c(t){return`/sample${t}`}const re=s({method:"post",path:c("/details"),alias:"details",parameters:[{name:"request",type:"Body",schema:q}],response:x}),oe=s({method:"post",path:c("/aggregated"),alias:"aggregated",parameters:[{name:"request",type:"Body",schema:q}],response:G}),ie=s({method:"post",path:c("/nucleotideMutations"),alias:"nucleotideMutations",parameters:[{name:"request",type:"Body",schema:D}],response:B}),ce=s({method:"post",path:c("/aminoAcidMutations"),alias:"aminoAcidMutations",parameters:[{name:"request",type:"Body",schema:D}],response:B}),de=s({method:"post",path:c("/nucleotideInsertions"),alias:"nucleotideInsertions",parameters:[{name:"request",type:"Body",schema:q}],response:I}),pe=s({method:"post",path:c("/aminoAcidInsertions"),alias:"aminoAcidInsertions",parameters:[{name:"request",type:"Body",schema:q}],response:I}),me=s({method:"post",path:c("/alignedNucleotideSequences"),alias:"alignedNucleotideSequences",immutable:!0,parameters:[{name:"request",type:"Body",schema:g}],response:e.string()}),ue=s({method:"post",path:c("/alignedNucleotideSequences/:segment"),alias:"alignedNucleotideSequencesMultiSegment",immutable:!0,parameters:[{name:"request",type:"Body",schema:g}],response:e.string()}),le=s({method:"post",path:c("/unalignedNucleotideSequences/:segment"),alias:"unalignedNucleotideSequencesMultiSegment",immutable:!0,parameters:[{name:"request",type:"Body",schema:g}],response:e.string()}),ge=s({method:"post",path:c("/unalignedNucleotideSequences"),alias:"unalignedNucleotideSequences",immutable:!0,parameters:[{name:"request",type:"Body",schema:g}],response:e.string()}),he=s({method:"post",path:c("/alignedAminoAcidSequences/:gene"),alias:"alignedAminoAcidSequences",immutable:!0,parameters:[{name:"request",type:"Body",schema:g}],response:e.string()}),Se=s({method:"get",path:c("/lineageDefinition/:column"),alias:"lineageDefinition",immutable:!0,response:W}),qe=y([re,oe,ie,ce,de,pe,me,ue,ge,le,he,Se]);var R=(t=>(t.loculus="Loculus",t))(R||{});const ye=e.object({accession:e.string(),type:e.nativeEnum(R),isFocal:e.boolean()}),be=e.array(ye),fe=e.object({seqSetId:e.string(),seqSetDOI:e.string().nullish(),seqSetVersion:e.number(),name:e.string(),description:e.string().optional(),createdAt:e.string(),createdBy:e.string()}),N=e.array(fe),U=e.object({years:e.array(e.number()),citations:e.array(e.number())}),Ee=e.object({username:e.string(),firstName:e.string(),lastName:e.string(),emailDomain:e.string(),university:e.string().nullish()}),ve=s({method:"get",path:"/get-seqsets-of-user",alias:"getSeqSetsOfUser",parameters:[r],response:N,errors:[a]}),Ae=s({method:"get",path:"/get-user-cited-by-seqset?username=:username",alias:"getUserCitedBy",parameters:[r],response:U,errors:[a]}),Be=s({method:"get",path:"/get-seqset-cited-by-publication?seqSetId=:seqSetId&version=:version",alias:"getSeqSetCitedBy",response:U,errors:[a]}),De=s({method:"get",path:"/get-seqset?seqSetId=:seqSetId&version=:version",alias:"getSeqSet",response:N,errors:[a]}),Ie=s({method:"get",path:"/get-seqset-records?seqSetId=:seqSetId&version=:version",alias:"getSeqSetRecords",response:be,errors:[a]}),Re=s({method:"post",path:"/validate-seqset-records",alias:"validateSeqSetRecords",parameters:[r,{name:"data",type:"Body",schema:e.array(e.object({accession:e.string().optional(),type:e.string().optional(),isFocal:e.boolean()})).optional()}],response:e.object({valid:e.boolean()}),errors:[a]}),Ne=s({method:"post",path:"/create-seqset",alias:"createSeqSet",parameters:[r,{name:"data",type:"Body",schema:e.object({name:e.string(),description:e.string().optional(),records:e.array(e.object({accession:e.string(),type:e.string(),isFocal:e.boolean()}))})}],response:e.object({seqSetId:e.string(),seqSetVersion:e.number()}),errors:[a]}),Ue=s({method:"post",path:"/create-seqset-doi?seqSetId=:seqSetId&version=:seqSetVersion",alias:"createSeqSetDOI",parameters:[r],response:e.object({seqSetId:e.string(),seqSetVersion:e.number()}),errors:[a]}),Fe=s({method:"put",path:"/update-seqset",alias:"updateSeqSet",parameters:[r,{name:"data",type:"Body",schema:e.object({seqSetId:e.string(),name:e.string(),description:e.string().optional(),records:e.array(e.object({accession:e.string(),type:e.string(),isFocal:e.boolean()})).optional()})}],response:e.object({seqSetId:e.string(),seqSetVersion:e.number()}),errors:[a]}),we=s({method:"delete",path:"/delete-seqset?seqSetId=:seqSetId&version=:seqSetVersion",alias:"deleteSeqSet",parameters:[r],response:e.never(),errors:[a]}),je=s({method:"get",path:"/get-author?username=:username",alias:"getAuthor",response:Ee,errors:[a]}),Me=y([ve,Ae,Be,De,Ie,Re,Ne,Ue,Fe,we,je]);function Ve(t){if(t==="")return[];const o=[];let i=null;const p=t.split(`
`);for(const u of p)if(u.startsWith(">"))i={name:u.slice(1).trim(),sequence:""},o.push(i);else{const m=u.trim();if(i)i.sequence+=m;else throw new Error("Fasta parsing error: encountered a sequence line without a preceding name line")}return o}const He=e.string().transform(Ve),ze=t=>({type:"nucleotide",aligned:!1,name:t}),Te=t=>({type:"nucleotide",aligned:!0,name:t}),xe=t=>({type:"aminoAcid",aligned:!0,name:t}),ke=t=>t.type==="nucleotide"&&!t.aligned,Ce=t=>t.type==="nucleotide"&&t.aligned,Ge=(t,o)=>o.type==="aminoAcid"&&o.name===t;function We(t){return new b("loculus",new f(t.backendUrl,ne))}function Le(t){const o=new b("lapis",new f(t,qe,{transform:!1}));return{zodiosHooks:o,utilityHooks:{useGetSequence(i,p,u){const{data:m,error:l,isLoading:h}=Pe(o,{accessionVersion:i,dataFormat:"FASTA"},p,u);if(m===void 0){if(w(l)){const F=l.response?.data?.error??l.response?.data,v=n.safeParse(F);if(v.success)return{data:null,error:v.data,isLoading:h}}return{data:m,error:l,isLoading:h}}const S=He.safeParse(m);return S.success?{data:S.data.length>0?S.data[0]:null,error:l,isLoading:h}:{data:void 0,error:S.error,isLoading:h}}}}}function Pe(t,o,i,p){return ke(i)?p?t.useUnalignedNucleotideSequencesMultiSegment(o,{params:{segment:i.name}}):t.useUnalignedNucleotideSequences(o):Ce(i)?p?t.useAlignedNucleotideSequencesMultiSegment(o,{params:{segment:i.name}}):t.useAlignedNucleotideSequences(o):t.useAlignedAminoAcidSequences(o,{params:{gene:i.name}})}function $e(t){return new b("loculus",new f(t.backendUrl,Me))}export{R as S,ne as a,We as b,Ce as c,Ge as d,Te as e,xe as g,ke as i,Le as l,$e as s,ze as u};
